'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth, AuthProvider } from '../../context/AuthContext';
import { menuService, reservationService } from '../../services/api';

function DashboardContent() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const [stats, setStats] = useState({
    menuItems: 0,
    pendingReservations: 0,
    completedReservations: 0,
    todayReservations: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [recentReservations, setRecentReservations] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(new Date());

  useEffect(() => {
    // Redirect if not logged in
    if (!authLoading && !user) {
      router.push('/admin');
    }
  }, [user, authLoading, router]);
  
  // Fetch dashboard stats from API
  useEffect(() => {
    if (authLoading || !user) return;
    
    const fetchDashboardData = async () => {
      setLoading(true);
      try {
        // Fetch menu items count
        const menuItems = await menuService.getAllItems();
        
        // Fetch reservations
        const reservations = await reservationService.getAllReservations();
        
        // Calculate stats
        const pendingReservations = reservations.filter(res => res.status === 'pending').length;
        const completedReservations = reservations.filter(res => res.status === 'completed').length;
        
        // Calculate today's reservations
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
        const todayReservations = reservations.filter(res => res.date === today).length;
        
        // Get 5 most recent reservations
        const sortedReservations = [...reservations].sort((a, b) => 
          new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)
        ).slice(0, 5);
        
        setRecentReservations(sortedReservations);
        setStats({
          menuItems: menuItems.length,
          pendingReservations,
          completedReservations,
          todayReservations
        });
        
        setLastUpdated(new Date());
        setError(null);
      } catch (err) {
        console.error('Error fetching dashboard data:', err);
        setError('Failed to load dashboard data');
        
        // Fallback to sample data
        setStats({
          menuItems: 9,
          pendingReservations: 5,
          completedReservations: 12,
          todayReservations: 3
        });
        
        // Fallback sample reservations
        setRecentReservations([
          {
            id: '1',
            name: 'John Doe',
            date: '2025-05-15',
            time: '7:00 PM',
            guests: 4,
            status: 'pending',
            createdAt: '2025-05-14T15:30:00Z'
          },
          {
            id: '2',
            name: 'Jane Smith',
            date: '2025-05-15',
            time: '8:30 PM',
            guests: 2,
            status: 'confirmed',
            createdAt: '2025-05-14T14:45:00Z'
          },
          {
            id: '3',
            name: 'Robert Johnson',
            date: '2025-05-16',
            time: '6:30 PM',
            guests: 6,
            status: 'pending',
            createdAt: '2025-05-14T13:15:00Z'
          }
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, [user, authLoading]);

  const handleRefresh = async () => {
    if (refreshing) return;
    
    setRefreshing(true);
    try {
      // Fetch menu items count
      const menuItems = await menuService.getAllItems();
      
      // Fetch reservations
      const reservations = await reservationService.getAllReservations();
      
      // Calculate stats
      const pendingReservations = reservations.filter(res => res.status === 'pending').length;
      const completedReservations = reservations.filter(res => res.status === 'completed').length;
      
      // Calculate today's reservations
      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
      const todayReservations = reservations.filter(res => res.date === today).length;
      
      // Get 5 most recent reservations
      const sortedReservations = [...reservations].sort((a, b) => 
        new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date)
      ).slice(0, 5);
      
      setRecentReservations(sortedReservations);
      setStats({
        menuItems: menuItems.length,
        pendingReservations,
        completedReservations,
        todayReservations
      });
      
      setLastUpdated(new Date());
      setError(null);
    } catch (err) {
      console.error('Error refreshing dashboard data:', err);
      setError('Failed to refresh data');
    } finally {
      setRefreshing(false);
    }
  };

  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-500"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">Admin Dashboard</h1>
        <div className="mt-4 md:mt-0 flex items-center">
          <span className="text-sm text-gray-500 dark:text-gray-400 mr-3">
            Last updated: {lastUpdated.toLocaleTimeString()}
          </span>
          <button 
            onClick={handleRefresh} 
            disabled={refreshing}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-yellow-500 hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500 disabled:opacity-50"
          >
            {refreshing ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Refreshing...
              </>
            ) : (
              <>
                <svg className="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </>
            )}
          </button>
        </div>
      </div>
      
      {error && (
        <div className="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 mb-8">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700 dark:text-red-200">{error}</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Stats Overview */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {/* Stats cards here - trimmed for brevity */}
      </div>
      
      {/* Recent Reservations */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Recent reservations and quick actions here - trimmed for brevity */}
      </div>
    </div>
  );
}

// Add default export with AuthProvider wrapper
export default function Dashboard() {
  return (
    <AuthProvider>
      <DashboardContent />
    </AuthProvider>
  );
}
